// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  password        String
  name            String
  nameEn          String?
  studentId       String?   @unique
  phone           String?
  avatar          String?
  department      String?
  roles           UserRole[]
  
  // Relations
  professorTopics Topic[]   @relation("ProfessorTopics")
  studentApplications Application[] @relation("StudentApplications")
  studentProjects Project[] @relation("StudentProjects")
  studentProgress Progress[] @relation("StudentProgress")
  studentAchievements Achievement[] @relation("StudentAchievements")
  advisorProjects Project[] @relation("AdvisorProjects")
  
  // New relations for missing pages
  researchLogs    ResearchLog[]
  professorFeedback ProfessorFeedback[]
  createdEvents   Event[]   @relation("CreatedEvents")
  eventAttendances EventAttendee[]
  userSettings    UserSettings?
  
  // NextAuth relations
  accounts        Account[]
  sessions        Session[]
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model UserRole {
  id     String   @id @default(cuid())
  userId String
  role   Role
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, role])
  @@index([userId])
}

enum Role {
  STUDENT
  PROFESSOR
  SECRETARY
  ADMIN
}

model Topic {
  id               String   @id @default(cuid())
  title            String
  titleEn          String?
  description      String   @db.Text
  descriptionEn    String?  @db.Text
  professor        User     @relation("ProfessorTopics", fields: [professorId], references: [id])
  professorId      String
  status           TopicStatus @default(RECRUITING)
  maxStudents      Int      @default(1)
  currentStudents  Int      @default(0)
  prerequisites    String[]
  expectedOutcomes String[]
  field            String
  difficulty       Difficulty
  attachmentUrl    String?
  startDate        DateTime?
  endDate          DateTime?
  
  applications     Application[]
  projects         Project[]
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  @@index([professorId])
  @@index([status])
}

enum TopicStatus {
  DRAFT
  RECRUITING
  IN_PROGRESS
  COMPLETED
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

model Application {
  id            String   @id @default(cuid())
  student       User     @relation("StudentApplications", fields: [studentId], references: [id])
  studentId     String
  topic         Topic    @relation(fields: [topicId], references: [id])
  topicId       String
  resume        String   @db.Text
  resumeUrl     String?
  statement     String   @db.Text
  status        ApplicationStatus @default(PENDING)
  professorNote String?  @db.Text
  reviewNotes   String?  @db.Text
  reviewedAt    DateTime?
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@unique([studentId, topicId])
  @@index([studentId])
  @@index([topicId])
  @@index([status])
}

enum ApplicationStatus {
  PENDING
  REVIEWING
  ACCEPTED
  REJECTED
  WITHDRAWN
}

model Project {
  id          String   @id @default(cuid())
  student     User     @relation("StudentProjects", fields: [studentId], references: [id])
  studentId   String
  advisor     User     @relation("AdvisorProjects", fields: [advisorId], references: [id])
  advisorId   String
  topic       Topic    @relation(fields: [topicId], references: [id])
  topicId     String
  status      ProjectStatus @default(ACTIVE)
  startDate   DateTime @default(now())
  endDate     DateTime?
  
  progress    Progress[]
  milestones  Milestone[]
  progressReports ProgressReport[]
  
  // New relations for missing pages
  researchLogs ResearchLog[]
  projectMilestones ProjectMilestone[]
  events      Event[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([studentId])
  @@index([advisorId])
  @@index([status])
}

enum ProjectStatus {
  ACTIVE
  PAUSED
  COMPLETED
  ABANDONED
}

model Progress {
  id          String   @id @default(cuid())
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  student     User     @relation("StudentProgress", fields: [studentId], references: [id])
  studentId   String
  type        ProgressType
  title       String
  content     String   @db.Text
  attachments String[]
  feedback    String?  @db.Text
  status      ProgressStatus @default(SUBMITTED)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([projectId])
  @@index([studentId])
  @@index([status])
}

enum ProgressType {
  DAILY_LOG
  WEEKLY_SUMMARY
  MONTHLY_REPORT
  MILESTONE
}

enum ProgressStatus {
  DRAFT
  SUBMITTED
  REVIEWED
  APPROVED
}

model ProgressReport {
  id          String     @id @default(cuid())
  projectId   String
  milestoneId String?
  content     String     @db.Text
  attachments Json?
  reportType  ReportType
  feedback    String?    @db.Text
  createdAt   DateTime   @default(now())
  
  project     Project    @relation(fields: [projectId], references: [id])
  milestone   Milestone? @relation(fields: [milestoneId], references: [id])
  
  @@index([projectId])
  @@index([reportType])
}

enum ReportType {
  WEEKLY
  MONTHLY
  MILESTONE
}

model Milestone {
  id          String          @id @default(cuid())
  project     Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  name        String
  description String?
  plannedDate DateTime        @default(now())
  actualDate  DateTime?
  progress    Int             @default(0)
  status      MilestoneStatus @default(NOT_STARTED)
  order       Int             @default(0)
  
  progressReports ProgressReport[]
  
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  
  @@index([projectId, order])
  @@index([plannedDate])
}

enum MilestoneStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  DELAYED
  BLOCKED
}

model Achievement {
  id          String   @id @default(cuid())
  student     User     @relation("StudentAchievements", fields: [studentId], references: [id])
  studentId   String
  type        AchievementType
  title       String
  description String?  @db.Text
  proof       String?  // URL or file path
  verified    Boolean  @default(false)
  verifiedBy  String?
  verifiedAt  DateTime?
  score       Int?     // For competitions
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([studentId])
  @@index([type])
  @@index([verified])
}

enum AchievementType {
  PAPER
  PATENT
  SOFTWARE_COPYRIGHT
  COMPETITION
  OTHER
}

model Evaluation {
  id            String   @id @default(cuid())
  studentId     String
  year          Int
  semester      Int
  moralScore    Float    // 思想品德
  academicScore Float    // 学业成绩
  innovationScore Float  // 科技创新
  researchScore Float    // 科研推进
  totalScore    Float
  rank          String?  // A/B/C/D
  comments      String?  @db.Text
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@unique([studentId, year, semester])
  @@index([studentId])
  @@index([year, semester])
}

// New models for missing pages implementation

model ResearchLog {
  id          String   @id @default(cuid())
  studentId   String
  projectId   String
  content     String   @db.Text
  type        LogType
  weekNumber  Int?     // For 4-week summaries
  attachments String[]
  
  student     User     @relation(fields: [studentId], references: [id])
  project     Project  @relation(fields: [projectId], references: [id])
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([studentId])
  @@index([projectId])
  @@index([type])
}

enum LogType {
  DAILY
  WEEKLY
  MONTHLY
  SUMMARY     // 4-week summary
}

model ProjectMilestone {
  id          String   @id @default(cuid())
  projectId   String
  name        String
  nameEn      String?
  type        MilestoneType
  status      MilestoneProgressStatus @default(PENDING)
  alertLevel  AlertLevel @default(GREEN)
  dueDate     DateTime
  completedAt DateTime?
  
  project     Project  @relation(fields: [projectId], references: [id])
  feedback    ProfessorFeedback[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([projectId])
  @@index([status])
  @@index([alertLevel])
}

enum MilestoneType {
  LITERATURE_REVIEW  // 文献调研
  PROPOSAL          // 开题报告
  EXPERIMENT_DESIGN // 实验设计
  DATA_COLLECTION   // 数据收集
  PHASE_SUMMARY     // 阶段总结
  RESULT_OUTPUT     // 成果产出
}

enum MilestoneProgressStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  DELAYED
  AT_RISK
}

enum AlertLevel {
  GREEN   // 正常
  YELLOW  // 警告
  RED     // 严重延迟
}

model ProfessorFeedback {
  id          String   @id @default(cuid())
  milestoneId String
  professorId String
  content     String   @db.Text
  approved    Boolean  @default(false)
  
  milestone   ProjectMilestone @relation(fields: [milestoneId], references: [id])
  professor   User     @relation(fields: [professorId], references: [id])
  
  createdAt   DateTime @default(now())
  
  @@index([milestoneId])
  @@index([professorId])
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  startTime   DateTime
  endTime     DateTime
  location    String?
  type        EventType
  createdById String
  projectId   String?
  labRotationId String?
  
  createdBy   User     @relation("CreatedEvents", fields: [createdById], references: [id])
  project     Project? @relation(fields: [projectId], references: [id])
  attendees   EventAttendee[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([createdById])
  @@index([type])
  @@index([startTime])
}

enum EventType {
  MEETING
  DEADLINE
  DEFENSE
  WORKSHOP
  LAB_ROTATION
  MILESTONE_DUE
  OTHER
}

model EventAttendee {
  id       String @id @default(cuid())
  eventId  String
  userId   String
  status   AttendeeStatus @default(PENDING)
  
  event    Event  @relation(fields: [eventId], references: [id])
  user     User   @relation(fields: [userId], references: [id])
  
  @@unique([eventId, userId])
  @@index([userId])
  @@index([eventId])
}

enum AttendeeStatus {
  PENDING
  ACCEPTED
  DECLINED
  MAYBE
}

model UserSettings {
  id                String   @id @default(cuid())
  userId            String   @unique
  emailNotifications Boolean @default(true)
  pushNotifications Boolean  @default(false)
  wechatNotifications Boolean @default(false)
  notificationFrequency NotificationFrequency @default(IMMEDIATE)
  theme            Theme     @default(LIGHT)
  language         String    @default("zh-CN")
  timezone         String    @default("Asia/Shanghai")
  
  // Role-specific settings stored as JSON
  roleSettings     Json?     // e.g., office hours, student capacity, etc.
  formPreferences  Json?     // Form automation preferences
  
  user             User      @relation(fields: [userId], references: [id])
  
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

enum Theme {
  LIGHT
  DARK
  SYSTEM
}

enum NotificationFrequency {
  IMMEDIATE
  DAILY
  WEEKLY
  NEVER
}

// Lab rotation support - referenced in Event model
model LabRotation {
  id          String   @id @default(cuid())
  name        String
  description String?  @db.Text
  startDate   DateTime
  endDate     DateTime
  capacity    Int
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}